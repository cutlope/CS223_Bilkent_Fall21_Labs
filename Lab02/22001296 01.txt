//Behavioral SystemVerilog module for the full adder and a testbench for it.
	module fulladder(

    input logic a, b, c,
    output logic sum, cout
    );
    
    assign sum = c ^ (a^b);
    assign cout = a & b | c & (a ^ b);
    
    
	endmodule
	
	
	//TestBench
	
	module fulladder_tb();
	logic a, b, c , sum, cout;

	fulladder dut(a, b, c, sum, cout);
    
    initial begin 
        a = 0; b = 0; c=0; #10;
        a = 0; b = 0; c=1; #10;
        a = 0; b = 1; c=0; #10;
        a = 0; b = 1; c=1; #10;
        a = 1; b = 0; c=0; #10;
        a = 1; b = 0; c=1; #10;
        a = 1; b = 1; c=0; #10;
        a = 1; b = 1; c=1; #10;
      end
	endmodule
	
	
//Structural SystemVerilog module for the full adder and a testbench for it.

	module xor2(input logic a,b, output logic c);
    assign c = a ^ b;
	endmodule

	module and2(input logic a,b, output logic c);
		assign c = a & b;
	endmodule

	module or2(input logic a,b, output logic c);
		assign c = a | b;
	endmodule


	module fulladder_structural(
		input logic a, b, c,
		output logic sum, cout
		);
		
		logic o1,o2,o3;
		xor2 i1(a,b,o1);
		xor2 i2(c,o1,sum);
		and2 i3(a,b,o2);
		and2 i4(c,o1,o3);
		or2 i5(o2,o3,cout);
	endmodule
	
	
	// TestBench
	
	module fulladder_structural_tb();
	logic a, b, c , sum, cout;

	fulladder_structural dut(a, b, c, sum, cout);
		
		initial begin 
			a = 0; b = 0; c=0; #10;
			a = 0; b = 0; c=1; #10;
			a = 0; b = 1; c=0; #10;
			a = 0; b = 1; c=1; #10;
			a = 1; b = 0; c=0; #10;
			a = 1; b = 0; c=1; #10;
			a = 1; b = 1; c=0; #10;
			a = 1; b = 1; c=1; #10;
			end
	endmodule

		
//Structural SystemVerilog module for the 2-bit adder and a testbench

	module two_bit_fulladder(
    input logic a1,b1,c1,a2,b2,
    output logic sum1, sum2, c2
    );
    
    logic cout;
    
    //1 bit adder
    fulladder fulladder_structural(a1,b1,c1,sum1,cout);
    fulladder fulladder_structura2(a2,b2,cout, sum2, c2);
    
endmodule


	//testbench
	module two_bit_fb_tb();
    logic a1,b1,c1,a2,b2,sum1,sum2,c2;
    two_bit_fulladder dut(a1,b1,c1,a2,b2, sum1, sum2, c2);

	//Partial Truth Table
     initial begin 
            a1 = 0; a2 = 0; b1=0; b2=0; c1=0; #10;
            a1 = 0; a2 = 0; b1=0; b2=0; c1=1; #10;
            a1 = 0; a2 = 0; b1=0; b2=1; c1=0; #10;
            a1 = 0; a2 = 0; b1=0; b2=1; c1=1; #10;
            a1 = 0; a2 = 0; b1=1; b2=0; c1=0; #10;
            a1 = 0; a2 = 0; b1=1; b2=0; c1=1; #10;
            a1 = 0; a2 = 0; b1=1; b2=1; c1=0; #10;
            a1 = 0; a2 = 0; b1=1; b2=0; c1=1; #10;
            a1 = 1; a2 = 0; b1=0; b2=0; c1=0; #10;
            a1 = 1; a2 = 0; b1=0; b2=0; c1=1; #10;
            a1 = 1; a2 = 0; b1=0; b2=1; c1=0; #10;
            a1 = 1; a2 = 0; b1=0; b2=1; c1=1; #10;
            a1 = 1; a2 = 0; b1=1; b2=0; c1=0; #10;
     end
	endmodule
	
	
//Structural SystemVerilog module for the lab calculator and a testbench
	module halfadder(input logic a,b, output logic c,s);
    assign c = a & b;
    assign s = a ^ b;
    
	endmodule
    
	module halfsub(input logic a,b, output logic c,d);
		assign c = ~a & b;
		assign d = a ^ b;
		
	endmodule

	module nor2(input logic a,b, output logic c);
		assign c = ~(a | b);
	endmodule

	module and2(input logic a,b, output logic c);
		assign c = a & b;
	endmodule
		

	  

	module labcalc(input logic a,b,c,d, output logic y,z);

	logic o1,o2,o3,o4,o5,o6;

	halfadder ha(a,b,o1,o2);
	halfsub hs(a,b,o3,o4);
	and2 a1(a,b,o5);
	nor2 no(a,b,o6);

	assign y = c ? ( d ? o4 : o2) : ( d ?  o6 : o5);
	assign z = c ? ( d ? o3 : o1) : 'x ;

	endmodule
	
	
	//testbench
	
	module labcalc_tb();
    logic a,b,c,d,y,z;
    labcalc calc(a,b,c,d,y,z);

	initial begin 
        c = 0; d = 0; a=0; b=0; #10;
        assert (y === 0) else $error("0000 failed.");
        c = 0; d = 0; a=0; b=1; #10;
        assert (y === 0) else $error("0001 failed.");
        c = 0; d = 0; a=1; b=0; #10;
        assert (y === 0) else $error("0010 failed.");
        c = 0; d = 0; a=1; b=1; #10;
        assert (y === 1) else $error("0011 failed.");
        c = 0; d = 1; a=0; b=0; #10;
        assert (y === 1) else $error("0100 failed.");
        c = 0; d = 1; a=0; b=1; #10
        assert (y === 0) else $error("0101 failed.");
        c = 0; d = 1; a=1; b=0; #10;
        assert (y === 0) else $error("0110 failed.");
        c = 0; d = 1; a=1; b=1; #10;
        assert (y === 0) else $error("0111 failed.");
        c = 1; d = 0; a=0; b=0; #10;
        assert (z === 0 & y === 0) else $error("1000 failed.");
        c = 1; d = 0; a=0; b=1; #10;
        assert (z === 0 & y === 1 ) else $error("1001 failed.");
        c = 1; d = 0; a=1; b=0; #10;
        assert (z === 0 & y === 1) else $error("1010 failed.");
        c = 1; d = 0; a=1; b=1; #10;
        assert (z === 1 & y === 0) else $error("1011 failed.");
        c = 1; d = 1; a=0; b=0; #10;
        assert (z === 0 & y === 0) else $error("1100 failed.");
        c = 1; d = 1; a=0; b=1; #10;
        assert (z === 1 & y === 1) else $error("1101 failed.");
        c = 1; d = 1; a=1; b=0; #10;
        assert (z === 0 & y === 1) else $error("1110 failed.");
        c = 1; d = 1; a=1; b=1; #10;
        assert (z === 0 & y === 0) else $error("1111 failed.");
     end

	endmodule
	
	